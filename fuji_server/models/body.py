# -*- coding: utf-8 -*-

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fuji_server.models.base_model_ import Model
from fuji_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, object_identifier: str=None, test_debug: bool=False, metadata_service_endpoint: str=None, metadata_service_type: str=None, use_datacite: bool=None, auth_token: str=None, auth_token_type: str=None, oaipmh_endpoint: str=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param object_identifier: The object_identifier of this Body.  # noqa: E501
        :type object_identifier: str
        :param test_debug: The test_debug of this Body.  # noqa: E501
        :type test_debug: bool
        :param metadata_service_endpoint: The metadata_service_endpoint of this Body.  # noqa: E501
        :type metadata_service_endpoint: str
        :param metadata_service_type: The metadata_service_type of this Body.  # noqa: E501
        :type metadata_service_type: str
        :param use_datacite: The use_datacite of this Body.  # noqa: E501
        :type use_datacite: bool
        :param auth_token: The auth_token of this Body.  # noqa: E501
        :type auth_token: str
        :param auth_token_type: The auth_token_type of this Body.  # noqa: E501
        :type auth_token_type: str
        :param oaipmh_endpoint: The oaipmh_endpoint of this Body.  # noqa: E501
        :type oaipmh_endpoint: str
        """
        self.swagger_types = {
            'object_identifier': str,
            'test_debug': bool,
            'metadata_service_endpoint': str,
            'metadata_service_type': str,
            'use_datacite': bool,
            'auth_token': str,
            'auth_token_type': str,
            'oaipmh_endpoint': str
        }

        self.attribute_map = {
            'object_identifier': 'object_identifier',
            'test_debug': 'test_debug',
            'metadata_service_endpoint': 'metadata_service_endpoint',
            'metadata_service_type': 'metadata_service_type',
            'use_datacite': 'use_datacite',
            'auth_token': 'auth_token',
            'auth_token_type': 'auth_token_type',
            'oaipmh_endpoint': 'oaipmh_endpoint'
        }
        self._object_identifier = object_identifier
        self._test_debug = test_debug
        self._metadata_service_endpoint = metadata_service_endpoint
        self._metadata_service_type = metadata_service_type
        self._use_datacite = use_datacite
        self._auth_token = auth_token
        self._auth_token_type = auth_token_type
        self._oaipmh_endpoint = oaipmh_endpoint

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_identifier(self) -> str:
        """Gets the object_identifier of this Body.

        The full identifier of data object that needs to be evaluated  # noqa: E501

        :return: The object_identifier of this Body.
        :rtype: str
        """
        return self._object_identifier

    @object_identifier.setter
    def object_identifier(self, object_identifier: str):
        """Sets the object_identifier of this Body.

        The full identifier of data object that needs to be evaluated  # noqa: E501

        :param object_identifier: The object_identifier of this Body.
        :type object_identifier: str
        """
        if object_identifier is None:
            raise ValueError("Invalid value for `object_identifier`, must not be `None`")  # noqa: E501

        self._object_identifier = object_identifier

    @property
    def test_debug(self) -> bool:
        """Gets the test_debug of this Body.

        Indicate if the detailed evaluation procedure of the metrics should to be included in the response  # noqa: E501

        :return: The test_debug of this Body.
        :rtype: bool
        """
        return self._test_debug

    @test_debug.setter
    def test_debug(self, test_debug: bool):
        """Sets the test_debug of this Body.

        Indicate if the detailed evaluation procedure of the metrics should to be included in the response  # noqa: E501

        :param test_debug: The test_debug of this Body.
        :type test_debug: bool
        """

        self._test_debug = test_debug

    @property
    def metadata_service_endpoint(self) -> str:
        """Gets the metadata_service_endpoint of this Body.

        The URL of the catalogue endpoint (e.g. OAI-PMH data-provider)  # noqa: E501

        :return: The metadata_service_endpoint of this Body.
        :rtype: str
        """
        return self._metadata_service_endpoint

    @metadata_service_endpoint.setter
    def metadata_service_endpoint(self, metadata_service_endpoint: str):
        """Sets the metadata_service_endpoint of this Body.

        The URL of the catalogue endpoint (e.g. OAI-PMH data-provider)  # noqa: E501

        :param metadata_service_endpoint: The metadata_service_endpoint of this Body.
        :type metadata_service_endpoint: str
        """

        self._metadata_service_endpoint = metadata_service_endpoint

    @property
    def metadata_service_type(self) -> str:
        """Gets the metadata_service_type of this Body.


        :return: The metadata_service_type of this Body.
        :rtype: str
        """
        return self._metadata_service_type

    @metadata_service_type.setter
    def metadata_service_type(self, metadata_service_type: str):
        """Sets the metadata_service_type of this Body.


        :param metadata_service_type: The metadata_service_type of this Body.
        :type metadata_service_type: str
        """

        self._metadata_service_type = metadata_service_type

    @property
    def use_datacite(self) -> bool:
        """Gets the use_datacite of this Body.

        Indicates if DataCite content negotiation (using the DOI) shall be used to collect metadata  # noqa: E501

        :return: The use_datacite of this Body.
        :rtype: bool
        """
        return self._use_datacite

    @use_datacite.setter
    def use_datacite(self, use_datacite: bool):
        """Sets the use_datacite of this Body.

        Indicates if DataCite content negotiation (using the DOI) shall be used to collect metadata  # noqa: E501

        :param use_datacite: The use_datacite of this Body.
        :type use_datacite: bool
        """

        self._use_datacite = use_datacite

    @property
    def auth_token(self) -> str:
        """Gets the auth_token of this Body.

        The authentication token required to access protected data  # noqa: E501

        :return: The auth_token of this Body.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token: str):
        """Sets the auth_token of this Body.

        The authentication token required to access protected data  # noqa: E501

        :param auth_token: The auth_token of this Body.
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def auth_token_type(self) -> str:
        """Gets the auth_token_type of this Body.

        The type of authentication (Oauth Bearer or HTTP Basic) needed to use the auth token  # noqa: E501

        :return: The auth_token_type of this Body.
        :rtype: str
        """
        return self._auth_token_type

    @auth_token_type.setter
    def auth_token_type(self, auth_token_type: str):
        """Sets the auth_token_type of this Body.

        The type of authentication (Oauth Bearer or HTTP Basic) needed to use the auth token  # noqa: E501

        :param auth_token_type: The auth_token_type of this Body.
        :type auth_token_type: str
        """
        allowed_values = ["Bearer", "Basic"]  # noqa: E501
        if auth_token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_token_type` ({0}), must be one of {1}"
                .format(auth_token_type, allowed_values)
            )

        self._auth_token_type = auth_token_type

    @property
    def oaipmh_endpoint(self) -> str:
        """Gets the oaipmh_endpoint of this Body.

        (Deprecated) The URL of the OAI-PMH data-provider  # noqa: E501

        :return: The oaipmh_endpoint of this Body.
        :rtype: str
        """
        return self._oaipmh_endpoint

    @oaipmh_endpoint.setter
    def oaipmh_endpoint(self, oaipmh_endpoint: str):
        """Sets the oaipmh_endpoint of this Body.

        (Deprecated) The URL of the OAI-PMH data-provider  # noqa: E501

        :param oaipmh_endpoint: The oaipmh_endpoint of this Body.
        :type oaipmh_endpoint: str
        """

        self._oaipmh_endpoint = oaipmh_endpoint