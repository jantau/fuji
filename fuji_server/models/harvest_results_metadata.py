# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fuji_server.models.base_model_ import Model
from fuji_server import util


class HarvestResultsMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, method: str=None, url: str=None, format: str=None, schema: str=None, namespaces: List[str]=None, metadata: Dict=None):  # noqa: E501
        """HarvestResultsMetadata - a model defined in Swagger

        :param method: The method of this HarvestResultsMetadata.  # noqa: E501
        :type method: str
        :param url: The url of this HarvestResultsMetadata.  # noqa: E501
        :type url: str
        :param format: The format of this HarvestResultsMetadata.  # noqa: E501
        :type format: str
        :param schema: The schema of this HarvestResultsMetadata.  # noqa: E501
        :type schema: str
        :param namespaces: The namespaces of this HarvestResultsMetadata.  # noqa: E501
        :type namespaces: List[str]
        :param metadata: The metadata of this HarvestResultsMetadata.  # noqa: E501
        :type metadata: Dict
        """
        self.swagger_types = {
            'method': str,
            'url': str,
            'format': str,
            'schema': str,
            'namespaces': List[str],
            'metadata': Dict
        }

        self.attribute_map = {
            'method': 'method',
            'url': 'url',
            'format': 'format',
            'schema': 'schema',
            'namespaces': 'namespaces',
            'metadata': 'metadata'
        }
        self._method = method
        self._url = url
        self._format = format
        self._schema = schema
        self._namespaces = namespaces
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'HarvestResultsMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HarvestResults_metadata of this HarvestResultsMetadata.  # noqa: E501
        :rtype: HarvestResultsMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self) -> str:
        """Gets the method of this HarvestResultsMetadata.


        :return: The method of this HarvestResultsMetadata.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: str):
        """Sets the method of this HarvestResultsMetadata.


        :param method: The method of this HarvestResultsMetadata.
        :type method: str
        """

        self._method = method

    @property
    def url(self) -> str:
        """Gets the url of this HarvestResultsMetadata.


        :return: The url of this HarvestResultsMetadata.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this HarvestResultsMetadata.


        :param url: The url of this HarvestResultsMetadata.
        :type url: str
        """

        self._url = url

    @property
    def format(self) -> str:
        """Gets the format of this HarvestResultsMetadata.


        :return: The format of this HarvestResultsMetadata.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this HarvestResultsMetadata.


        :param format: The format of this HarvestResultsMetadata.
        :type format: str
        """

        self._format = format

    @property
    def schema(self) -> str:
        """Gets the schema of this HarvestResultsMetadata.


        :return: The schema of this HarvestResultsMetadata.
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema: str):
        """Sets the schema of this HarvestResultsMetadata.


        :param schema: The schema of this HarvestResultsMetadata.
        :type schema: str
        """

        self._schema = schema

    @property
    def namespaces(self) -> List[str]:
        """Gets the namespaces of this HarvestResultsMetadata.


        :return: The namespaces of this HarvestResultsMetadata.
        :rtype: List[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces: List[str]):
        """Sets the namespaces of this HarvestResultsMetadata.


        :param namespaces: The namespaces of this HarvestResultsMetadata.
        :type namespaces: List[str]
        """

        self._namespaces = namespaces

    @property
    def metadata(self) -> Dict:
        """Gets the metadata of this HarvestResultsMetadata.


        :return: The metadata of this HarvestResultsMetadata.
        :rtype: Dict
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict):
        """Sets the metadata of this HarvestResultsMetadata.


        :param metadata: The metadata of this HarvestResultsMetadata.
        :type metadata: Dict
        """

        self._metadata = metadata
